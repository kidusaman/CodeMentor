{"ast":null,"code":"var _jsxFileName = \"/Users/kidusamanuel/Desktop/codeDebugger/frontend/src/components/CodeQualityChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { checkCodeQuality } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeQualityChecker() {\n  _s();\n  const [code, setCode] = useState('');\n  const [result, setResult] = useState('');\n  const handleCheckQuality = async () => {\n    try {\n      const response = await checkCodeQuality(code);\n      setResult(response.result);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(error);\n      setResult(`Error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Code Quality Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 6,\n      cols: 60,\n      placeholder: \"Paste your code here...\",\n      value: code,\n      onChange: e => setCode(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheckQuality,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Check Quality\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Quality Analysis:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeQualityChecker, \"YE1KHZ843NwlGTQmSr1F1cJawi0=\");\n_c = CodeQualityChecker;\nexport default CodeQualityChecker;\nvar _c;\n$RefreshReg$(_c, \"CodeQualityChecker\");","map":{"version":3,"names":["React","useState","checkCodeQuality","jsxDEV","_jsxDEV","CodeQualityChecker","_s","code","setCode","result","setResult","handleCheckQuality","response","error","_error$response","_error$response$data","console","data","detail","message","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","placeholder","value","onChange","e","target","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/kidusamanuel/Desktop/codeDebugger/frontend/src/components/CodeQualityChecker.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { checkCodeQuality } from '../services/api';\n\nfunction CodeQualityChecker() {\n  const [code, setCode] = useState('');\n  const [result, setResult] = useState('');\n\n  const handleCheckQuality = async () => {\n    try {\n      const response = await checkCodeQuality(code);\n      setResult(response.result);\n    } catch (error) {\n      console.error(error);\n      setResult(`Error: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Code Quality Checker</h2>\n      <textarea\n        rows={6}\n        cols={60}\n        placeholder=\"Paste your code here...\"\n        value={code}\n        onChange={(e) => setCode(e.target.value)}\n      />\n      <br />\n      <button onClick={handleCheckQuality} style={{ marginTop: '10px' }}>Check Quality</button>\n      <h3>Quality Analysis:</h3>\n      <pre>{result}</pre>\n    </div>\n  );\n}\n\nexport default CodeQualityChecker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,gBAAgB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,gBAAgB,CAACK,IAAI,CAAC;MAC7CG,SAAS,CAACE,QAAQ,CAACH,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC;MACpBH,SAAS,CAAC,UAAU,EAAAI,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,MAAM,KAAIL,KAAK,CAACM,OAAO,EAAE,CAAC;IACtE;EACF,CAAC;EAED,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BpB,OAAA;MACEqB,IAAI,EAAE,CAAE;MACRC,IAAI,EAAE,EAAG;MACTC,WAAW,EAAC,yBAAyB;MACrCC,KAAK,EAAErB,IAAK;MACZsB,QAAQ,EAAGC,CAAC,IAAKtB,OAAO,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eACFpB,OAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNpB,OAAA;MAAQ4B,OAAO,EAAErB,kBAAmB;MAACsB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAd,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzFpB,OAAA;MAAAgB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BpB,OAAA;MAAAgB,QAAA,EAAMX;IAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAAClB,EAAA,CA9BQD,kBAAkB;AAAA8B,EAAA,GAAlB9B,kBAAkB;AAgC3B,eAAeA,kBAAkB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}